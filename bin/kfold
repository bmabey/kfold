#!/usr/bin/env ruby

require 'rubygems'
require 'commander/import'
require 'kfold'
require 'fileutils'

program :version, Kfold::VERSION
program :description, 'Do stuff'
 
def do_directory(dir, overwrite = false)
  if File.exist? dir
    if overwrite
      say "Removing existing #{dir}"
      FileUtils.rm_rf(dir)
    else
      abort "Failed: Directory #{dir} exists" 
    end
  end
  FileUtils.mkdir dir
end

command :split do |c|
  c.syntax = 'kfold split -i INPUT [options]'
  c.summary = 'Split a data file into K partitions'
  c.description = 'Given the data file INPUT, the partitions are written to files named INPUT.parts/{01..K}'
  c.example 'Split the file sample.txt into 4 parts', 'kfold split -k4 sample.txt'
  c.example 'Split the double-newline-delimited file sample.conll into 10 parts', 'kfold split -d"\n\n" sample.conll'
  c.option '-i', '--input FILE', String, 'Data file to split'
  c.option '-k', '--parts N', Integer, 'The number of partitions desired'
  c.option '-d', '--delimiter DELIM', String, 'String used to separate individual entries (newline per default)'
  c.option '-g', '--granularity N', Integer, 'Ensure the number of entries in each partition is divisible by N (useful for block-structured data)'
  c.option '-f', '--overwrite', 'Remove existing parts prior to executing'
  c.option '--fold', 'Additionally, create K folds of K-1 parts in a another folder'
  c.option '--parts-name STRING', String, 'Use the given name as suffix for the partitions folder created'
  c.option '--folds-name STRING', String, 'Use the given name as suffix for the folds folder created'
  c.action do |args, options|
    options.default :parts => 10, :delimiter => "\n", :granularity => 1, :parts_name => 'test', :folds_name => 'train'
    abort "Failed: Please specify input file using -i INPUT" unless options.input 
    abort "Failed: Input file #{options.input} does not exist" unless File.exist? options.input
    # Interpret newlines, linefeeds and tabs
    options.delimiter.gsub!('\n', "\n")
    options.delimiter.gsub!('\r', "\r")
    options.delimiter.gsub!('\t', "\t")
    parts_dir = "#{options.input}.#{options.parts_name}"
    do_directory(parts_dir, options.overwrite)
    df = Kfold::DataFile.new(options.input, options.delimiter, options.granularity)
    say "Partitioning breakdown: #{df.breakdown options.parts}"
    part, part_file, last_part_num = nil
    part_names = []
    part_entries = 0
    df.each_entry_in_parts(options.parts) do |part_num, entry|
      if part_num != last_part_num
        if part
          part.close
          say "[part] Wrote #{part_entries} entries to #{part_file}"
        end
        part_name = part_num.to_s.rjust(options.parts.to_s.size, '0')
        part_names << part_name
        part_file = File.join(parts_dir, part_name)
        part = File.open(part_file, 'w')
        last_part_num = part_num
        part_entries = 0
      end
      part << entry
      part_entries += 1
    end
    say "[part] Wrote #{part_entries} entries to #{part_file}"
    part.close
    if options.fold
      folds_dir = "#{options.input}.#{options.folds_name}"
      do_directory(folds_dir, options.overwrite)
      part_names.each do |fold_name|
        fold_parts = part_names - [fold_name]
        fold_file = File.join(folds_dir, fold_name)
        File.open(fold_file, 'w') do |fold|
          fold_parts.each do |part|
            part_file = File.join(parts_dir, part)
            fold << File.open(part_file).read
          end
        end
        say "[fold] Wrote parts #{fold_parts * ' '} to #{fold_file}"
      end
    end
  end
end

alias_command :fold, :split, '--fold'

command :train do |c|
  c.syntax = 'kfold train --base NAME [options] -- CMD [--CMD-OPTIONS] [CMD-ARGS]'
  c.summary = 'Train models on a dataset previously split using kfold'
  c.description = <<-end
Given training data previously split in K parts and folds, train K models on the K folds
    
    Certain keywords in the training command and its arguments are interpolated at runtime:

     * %N  - fold number, e.g. '01'
     * %F  - fold filename, e.g. 'brown.train/01'
     * %I  - alias for %F
     * %M  - model filename, e.g. 'brown.models/01'
     * %B  - basename (as specified on the command line), e.g. 'brown'
  end
  c.option '-f', '--overwrite', 'Remove existing models prior to executing'
  c.option '--base NAME', String, 'Default prefix of training folds and model files'
  c.option '--folds-name SUFFIX', String, 'Look for folds {01..K} in the folder BASE.SUFFIX'
  c.option '--models-name SUFFIX', String, 'Yield model names as BASE.SUFFIX/{01..K} as interpolation pattern %M'
  c.action do |args, options|
    options.default :folds_name => 'train', :models_name => 'models'
    raise "Must specify base name using --base" unless options.base
    folds_dir = "#{options.base}.#{options.folds_name}"
    models_dir = "#{options.base}.#{options.models_name}"
    raise "Folds directory not found" unless File.exists?(folds_dir)
    folds = Dir.glob(File.join(folds_dir, '*')).collect { |file|
      file if File.basename(file) =~ /^[0-9]+$/
    }.compact
    raise "No folds found in #{folds_dir}" if folds.count == 0
    say "Found #{folds.count} folds in #{folds_dir}"
    cmds = folds.collect do |fold|
      num = File.basename(fold)
      model = File.join(models_dir, num)
      args.collect { |arg|
        arg.gsub(/%F/, fold).gsub(/%T/, fold).gsub(/%N/, num).gsub('%M', model).gsub('%B', options.base)
      }.join(' ')
    end
    do_directory(models_dir, options.overwrite) if cmds.first.match(models_dir)
    cmds.each do |cmd|
      say "[exec] #{cmd}"
      system cmd
    end
  end
end

command :test do |c|
  c.syntax = 'kfold test --base NAME [options] -- CMD [--CMD-OPTIONS] [CMD-ARGS]'
  c.summary = 'Apply trained models on a dataset previously split using kfold'
  c.option '-f', '--overwrite', 'Remove existing test output prior to executing'
  c.option '--base NAME', String, 'Default prefix of model files and test outputs'
  c.option '--parts-name SUFFIX', String, 'Look for parts {01..K} to be processed in the folder BASE.SUFFIX'
  c.option '--models-name SUFFIX', String, 'Yield model names as BASE.SUFFIX/{01..K} as interpolation pattern %M'
  c.option '--outputs-name SUFFIX', String, 'Yield output filenames as BASE.SUFFIX/{01..K} as interpolation pattern %O'
  c.option '--output-name SUFFIX', String, 'Put the concatenated output of all models in BASE.SUFFIX'
  c.action do |args, options|
    options.default :parts_name => 'test', :models_name => 'models', :outputs_name => 'outputs', :output_name => 'output'
    raise "Must specify base name using --base" unless options.base
    parts_dir = "#{options.base}.#{options.parts_name}"
    models_dir = "#{options.base}.#{options.models_name}"
    output_dir = "#{options.base}.#{options.outputs_name}"
    output_file = "#{options.base}.#{options.output_name}"
    raise "Parts directory not found" unless File.exists?(parts_dir)
    raise "Model directory not found" unless File.exists?(models_dir)
    parts = Dir.glob(File.join(parts_dir, '*')).collect { |file|
      file if File.basename(file) =~ /^[0-9]+$/
    }.compact
    raise "No parts found in #{parts_dir}" if parts.count == 0
    say "Found #{parts.count} parts in #{parts_dir}"
    outputs = []
    cmds = parts.collect do |part|
      num = File.basename(part)
      model = File.join(models_dir, num)
      output = File.join(output_dir, num)
      outputs << output
      args.collect { |arg|
        arg.gsub(/%O/, output).gsub(/%I/, part).gsub(/%T/, part).gsub(/%N/, num).gsub('%M', model).gsub('%B', options.base)
      }.join(' ')
    end
    do_directory(output_dir, options.overwrite)
    cmds.each do |cmd|
      say "[exec] #{cmd}"
      system cmd
    end
    say "[join] #{outputs.join(' ')} => #{output_file}"
    system "cat #{outputs.join(' ')} > #{output_file}"
  end  
end