#!/usr/bin/env ruby

require 'rubygems'
require 'commander/import'
require 'kfold'
require 'fileutils'

program :version, Kfold::VERSION
program :description, 'Do stuff'
 
def do_directory(dir, overwrite = false)
  if File.exist? dir
    if overwrite
      say "Removing existing #{dir}"
      FileUtils.rm_rf(dir)
    else
      abort "Failed: Directory #{dir} exists" 
    end
  end
  FileUtils.mkdir dir
end

command :split do |c|
  c.syntax = 'kfold split -i INPUT [options]'
  c.summary = 'Split a data file into K partitions'
  c.description = 'Given the data file INPUT, the partitions are written to files named INPUT.parts/{01..K}'
  c.example 'Split the file sample.txt into 4 parts', 'kfold split -k4 sample.txt'
  c.example 'Split the double-newline-delimited file sample.conll into 10 parts', 'kfold split -d"\n\n" sample.conll'
  c.option '-i', '--input FILE', String, 'Data file to split'
  c.option '-k', '--parts N', Integer, 'The number of partitions desired'
  c.option '-d', '--delimiter DELIM', String, 'String used to separate individual entries (newline per default)'
  c.option '-g', '--granularity N', Integer, 'Ensure the number of entries in each partition is divisible by N (useful for block-structured data)'
  c.option '-f', '--overwrite', 'Remove existing parts prior to executing'
  c.option '--fold', 'Additionally, create K folds of K-1 parts in a another folder'
  c.option '--parts-name STRING', String, 'Use the given name as suffix for the partitions folder created'
  c.option '--folds-name STRING', String, 'Use the given name as suffix for the folds folder created'
  c.action do |args, options|
    options.default :parts => 10, :delimiter => "\n", :granularity => 1, :parts_name => 'parts'
    abort "Failed: Please specify input file using -i INPUT" unless options.input 
    abort "Failed: Input file #{options.input} does not exist" unless File.exist? options.input
    # Interpret newlines, linefeeds and tabs
    options.delimiter.gsub!('\n', "\n")
    options.delimiter.gsub!('\r', "\r")
    options.delimiter.gsub!('\t', "\t")
    parts_dir = "#{options.input}.#{options.parts_name}"
    do_directory(parts_dir, options.overwrite)
    df = Kfold::DataFile.new(options.input, options.delimiter, options.granularity)
    say "Partitioning breakdown: #{df.breakdown options.parts}"
    part, part_file, last_part_num = nil
    part_names = []
    part_entries = 0
    df.each_entry_in_parts(options.parts) do |part_num, entry|
      if part_num != last_part_num
        if part
          part.close
          say "[part] Wrote #{part_entries} entries to #{part_file}"
        end
        part_name = part_num.to_s.rjust(options.parts.to_s.size, '0')
        part_names << part_name
        part_file = File.join(parts_dir, part_name)
        part = File.open(part_file, 'w')
        last_part_num = part_num
        part_entries = 0
      end
      part << entry
      part_entries += 1
    end
    say "[part] Wrote #{part_entries} entries to #{part_file}"
    part.close
    if options.fold
      folds_dir = "#{options.input}.#{options.folds_name}"
      do_directory(folds_dir, options.overwrite)
      part_names.each do |fold_name|
        fold_parts = part_names - [fold_name]
        fold_file = File.join(folds_dir, fold_name)
        File.open(fold_file, 'w') do |fold|
          fold_parts.each do |part|
            part_file = File.join(parts_dir, part)
            fold << File.open(part_file).read
          end
        end
        say "[fold] Wrote parts #{fold_parts * ' '} to #{fold_file}"
      end
    end
  end
end

alias_command :fold, :split, '--fold'

#command :train do |c|
#  c.syntax = 'kfold train [options]'
#  c.summary = ''
#  c.description = ''
#  c.example 'description', 'command example'
#  c.option '--some-switch', 'Some switch that does something'
#  c.action do |args, options|
#    # Do something or c.when_called Kfold::Commands::Train
#  end
#end
#
#command :test do |c|
#  c.syntax = 'kfold test [options]'
#  c.summary = ''
#  c.description = ''
#  c.example 'description', 'command example'
#  c.option '--some-switch', 'Some switch that does something'
#  c.action do |args, options|
#    # Do something or c.when_called Kfold::Commands::Test
#  end
#end

